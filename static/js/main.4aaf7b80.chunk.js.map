{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","callBack","useState","title","setTitle","error","setError","addTask","newTitle","trim","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","edit","setEdit","setNewTitle","autoFocus","onBlur","onDoubleClick","Todolist","editTitleTodolist","id","removeTodolist","tasks","map","t","key","isDone","type","newIsDoneValue","checked","changeTaskStatus","editTitleTask","removeTask","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","el","console","log","taskId","todolistTasks","task","changeStatus","find","todolist","tl","newId","allTodolistTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oQAMaA,G,MAAc,SAACC,GACxB,IAAOC,EAAYD,EAAZC,SAEP,EAAwBC,mBAAS,IAAjC,mBAAKC,EAAL,KAAYC,EAAZ,KACA,EAAwBF,mBAAwB,MAAhD,mBAAKG,EAAL,KAAYC,EAAZ,KAEMC,EAAU,WACZ,IAAIC,EAAWL,EAAMM,OACJ,KAAbD,GACAP,EAASO,GACTJ,EAAS,KAETE,EAAS,sBAejB,OACI,6BACI,2BAAOI,MAAOP,EACPQ,SAdS,SAACC,GACrBR,EAASQ,EAAEC,cAAcH,QAcdI,WAXW,SAACF,GACvBN,EAAS,MACU,KAAfM,EAAEG,UACFR,KASOS,UAAWX,EAAQ,QAAU,KAEpC,4BAAQY,QAASV,GAAjB,KACCF,GAAS,yBAAKW,UAAU,iBAAiBX,MClCzCa,EAAe,SAAClB,GACzB,MAAsBE,oBAAS,GAA/B,mBAAMiB,EAAN,KAAWC,EAAX,KACA,EAA8BlB,mBAASF,EAAMG,OAA7C,mBAAKK,EAAL,KAAea,EAAf,KAcA,OACIF,EACE,2BAAOT,MAASF,EAAUc,WAAS,EAACC,OAPpB,WAClBvB,EAAMC,SAASO,GACfY,GAAQ,IAKqDT,SAdzC,SAACC,GACrBS,EAAYT,EAAEC,cAAcH,UActB,0BAAMc,cAXa,WACzBJ,GAAQ,KAU0CpB,EAAMG,QCDzD,SAASsB,EAASzB,GAoCrB,OAAO,6BACH,4BACI,kBAAC,EAAD,CAAcG,MAAOH,EAAMG,MAAOF,SANT,SAACE,GAC9BH,EAAM0B,kBAAmB1B,EAAM2B,GAAGxB,MAM9B,4BAAQc,QAdO,kBAAMjB,EAAM4B,eAAe5B,EAAM2B,MAchD,MAEJ,kBAAC,EAAD,CAAa1B,SAZM,SAACE,GACpBH,EAAMO,QAAQJ,EAAMH,EAAM2B,OAqB1B,4BAEQ3B,EAAM6B,MAAMC,KAAI,SAAAC,GAUZ,OAAO,wBAAIC,IAAKD,EAAEJ,GAAIX,UAAWe,EAAEE,OAAS,UAAY,IACpD,2BAAOC,KAAK,WAAWvB,SATH,SAACC,GACrB,IAAIuB,EAAiBvB,EAAEC,cAAcuB,QACrCpC,EAAMqC,iBAAiBN,EAAEJ,GAAIQ,EAAgBnC,EAAM2B,KAODS,QAASL,EAAEE,SAC7D,kBAAC,EAAD,CAAc9B,MAAO4B,EAAE5B,MAAOF,SANL,SAACE,GAC1BH,EAAMsC,cAAetC,EAAM2B,GAAGI,EAAEJ,GAAGxB,MAMnC,4BAAQc,QAZW,kBAAMjB,EAAMuC,WAAWR,EAAEJ,GAAI3B,EAAM2B,MAYtD,UAKhB,6BACI,4BAAQX,UAA4B,QAAjBhB,EAAMwC,OAAmB,gBAAkB,GACtDvB,QA/CU,kBAAMjB,EAAMyC,aAAa,MAAOzC,EAAM2B,MA8CxD,OAGA,4BAAQX,UAA4B,WAAjBhB,EAAMwC,OAAsB,gBAAkB,GACzDvB,QAjDa,kBAAMjB,EAAMyC,aAAa,SAAUzC,EAAM2B,MAgD9D,UAGA,4BAAQX,UAA4B,cAAjBhB,EAAMwC,OAAyB,gBAAkB,GAC5DvB,QAnDgB,kBAAMjB,EAAMyC,aAAa,YAAazC,EAAM2B,MAkDpE,e,YCoCGe,MAzHf,WAAgB,IAAD,EACPC,EAAcC,cACdC,EAAcD,cAElB,EAAgC1C,mBAA8B,CAC1D,CAACyB,GAAIgB,EAAaxC,MAAO,gBAAiBqC,OAAQ,OAClD,CAACb,GAAIkB,EAAa1C,MAAO,cAAeqC,OAAQ,SAFpD,mBAAKM,EAAL,KAAgBC,EAAhB,KAKA,EAAwB7C,oBAAQ,mBAC3ByC,EAAc,CACX,CAAChB,GAAIiB,cAAMzC,MAAO,WAAY8B,QAAQ,GACtC,CAACN,GAAIiB,cAAMzC,MAAO,KAAM8B,QAAQ,KAHR,cAK3BY,EAAc,CACX,CAAClB,GAAIiB,cAAMzC,MAAO,OAAQ8B,QAAQ,GAClC,CAACN,GAAIiB,cAAMzC,MAAO,aAAc8B,QAAQ,KAPhB,IAAhC,mBAAKJ,EAAL,KAAYmB,EAAZ,KAWMtB,EAAoB,SAACuB,EAAmB9C,GAC1C4C,EAAaD,EAAUhB,KAAK,SAAAoB,GAAE,OAAIA,EAAGvB,IAAMsB,EAAT,2BAAyBC,GAAzB,IAA4B/C,UAAQ+C,MACtEC,QAAQC,IAAIjD,IAGVmC,EAAgB,SAACW,EAAmBI,EAAclD,GACpD6C,EAAS,2BAAInB,GAAL,kBAAYoB,EAAYpB,EAAMoB,GAAYnB,KAAI,SAAAoB,GAAE,OAAIA,EAAGvB,KAAO0B,EAAV,2BAAuBH,GAAvB,IAA0B/C,UAAS+C,QAC/FC,QAAQC,IAAIjD,IAEhB,SAASoC,EAAWZ,EAAYsB,GAE5B,IAAIK,EAAgBzB,EAAMoB,GAE1BpB,EAAMoB,GAAcK,EAAcd,QAAO,SAAAT,GAAC,OAAIA,EAAEJ,IAAMA,KAEtDqB,EAAS,eAAInB,IAGjB,SAAStB,EAAQJ,EAAe8C,GAC5B,IAAIM,EAAO,CAAC5B,GAAIiB,cAAMzC,MAAOA,EAAO8B,QAAQ,GAExCqB,EAAgBzB,EAAMoB,GAE1BpB,EAAMoB,GAAN,CAAqBM,GAArB,mBAA8BD,IAE9BN,EAAS,eAAInB,IAUjB,SAAS2B,EAAa7B,EAAYM,EAAiBgB,GAE/C,IAEIM,EAFgB1B,EAAMoB,GAEDQ,MAAK,SAAA1B,GAAC,OAAIA,EAAEJ,KAAOA,KAExC4B,IACAA,EAAKtB,OAASA,EAEde,EAAS,eAAInB,KAIrB,SAASY,EAAa/B,EAAyBuC,GAC3C,IAAIS,EAAWZ,EAAUW,MAAK,SAAAE,GAAE,OAAIA,EAAGhC,KAAOsB,KAC1CS,IACAA,EAASlB,OAAS9B,EAClBqC,EAAa,YAAID,KAIzB,SAASlB,EAAeD,GAEpBoB,EAAaD,EAAUN,QAAO,SAAAmB,GAAE,OAAIA,EAAGhC,IAAMA,aAEtCE,EAAMF,GAEbqB,EAAS,eAAInB,IAGjB,OACI,yBAAKb,UAAU,OACX,kBAAC,EAAD,CAAaf,SAvCD,SAACO,GACjB,IAAIoD,EAAQhB,cAEZG,EAAa,CADkB,CAACpB,GAAIiC,EAAOzD,MAAOK,EAAUgC,OAAQ,QACxD,mBAAiBM,KAC7BE,EAAS,2BAAInB,GAAL,kBAAY+B,EAAO,SAqCnBd,EAAUhB,KAAI,SAAA6B,GACV,IAAIE,EAAmBhC,EAAM8B,EAAGhC,IAC5BmC,EAAmBD,EASvB,MAPkB,WAAdF,EAAGnB,SACHsB,EAAmBD,EAAiBrB,QAAO,SAAAT,GAAC,OAAiB,IAAbA,EAAEE,WAEpC,cAAd0B,EAAGnB,SACHsB,EAAmBD,EAAiBrB,QAAO,SAAAT,GAAC,OAAiB,IAAbA,EAAEE,WAG/C,kBAACR,EAAD,CACHO,IAAK2B,EAAGhC,GACRA,GAAIgC,EAAGhC,GACPxB,MAAOwD,EAAGxD,MACV0B,MAAOiC,EACPvB,WAAYA,EACZE,aAAcA,EACdlC,QAASA,EACT8B,iBAAkBmB,EAClBhB,OAAQmB,EAAGnB,OACXZ,eAAgBA,EAChBF,kBAAqBA,EACrBY,cAAiBA,SCtHrByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzE,GACL8C,QAAQ9C,MAAMA,EAAM0E,a","file":"static/js/main.4aaf7b80.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\n\ntype AddItemFormTypeProps = {\n    callBack: (title: string)=>void\n    // todolistId:string\n}\nexport const AddItemForm = (props:AddItemFormTypeProps) => {\n    const {callBack} = props\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addTask = () => {\n        let newTitle = title.trim();\n        if (newTitle !== \"\") {\n            callBack(newTitle);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        setError(null);\n        if (e.charCode === 13) {\n            addTask();\n        }\n    }\n\n    return (\n        <div>\n            <input value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   className={error ? \"error\" : \"\"}\n            />\n            <button onClick={addTask}>+</button>\n            {error && <div className=\"error-message\">{error}</div>}\n        </div>\n    );\n};\n\n","import React, {ChangeEvent, useState} from 'react';\n\ntype EditableSpanPropsType = {\n    title:string\n    callBack: (title:string) => void\n}\n\nexport const EditableSpan = (props:EditableSpanPropsType) => {\n    const[edit,setEdit] = useState(false)\n    let [newTitle, setNewTitle] = useState(props.title)\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTitle(e.currentTarget.value)\n    }\n\n    const onDoubleClickHandler = () => {\n        setEdit(true)\n    }\n    const onBlurHandler = () => {\n        props.callBack(newTitle)\n        setEdit(false)\n    }\n\n    return (\n        edit\n        ? <input value = {newTitle} autoFocus onBlur={onBlurHandler} onChange={onChangeHandler}/>\n            : <span onDoubleClick={onDoubleClickHandler}>{props.title}</span>\n    );\n};\n\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    editTitleTodolist: (todolistId: string,title:string) => void\r\n    editTitleTask : (todolistId: string,taskId:string,title:string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    // let [title, setTitle] = useState(\"\")\r\n    // let [error, setError] = useState<string | null>(null)\r\n\r\n    // const addTask = () => {\r\n    //     let newTitle = title.trim();\r\n    //     if (newTitle !== \"\") {\r\n    //         props.addTask(newTitle, props.id);\r\n    //         setTitle(\"\");\r\n    //     } else {\r\n    //         setError(\"Title is required\");\r\n    //     }\r\n    // }\r\n\r\n    // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     setTitle(e.currentTarget.value)\r\n    // }\r\n    //\r\n    // const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    //     setError(null);\r\n    //     if (e.charCode === 13) {\r\n    //         addTask();\r\n    //     }\r\n    // }\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n    const addTaskHandler = (title:string) => {\r\n        props.addTask(title,props.id)\r\n    }\r\n    const editTitleTodolistHandler = (title:string) => {\r\n        props.editTitleTodolist (props.id,title)\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan title={props.title} callBack = {editTitleTodolistHandler}/>\r\n            <button onClick={removeTodolist}>x</button>\r\n        </h3>\r\n        <AddItemForm callBack={addTaskHandler} />\r\n        {/*<div>*/}\r\n        {/*    <input value={title}*/}\r\n        {/*           onChange={onChangeHandler}*/}\r\n        {/*           onKeyPress={onKeyPressHandler}*/}\r\n        {/*           className={error ? \"error\" : \"\"}*/}\r\n        {/*    />*/}\r\n        {/*    <button onClick={addTask}>+</button>*/}\r\n        {/*    {error && <div className=\"error-message\">{error}</div>}*/}\r\n        {/*</div>*/}\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const editTitleTaskHandler = (title:string) => {\r\n                        props.editTitleTask (props.id,t.id,title)\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                        <EditableSpan title={t.title} callBack={editTitleTaskHandler}/>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n    const editTitleTodolist = (todolistId: string,title:string) => {\r\n        setTodolists(todolists.map (el => el.id == todolistId? {...el,title}: el))\r\n        console.log(title)\r\n    }\r\n\r\n    const editTitleTask = (todolistId: string,taskId:string,title:string) => {\r\n        setTasks({...tasks,[todolistId]:tasks[todolistId].map(el => el.id === taskId ? {...el,title} : el )})\r\n        console.log(title)\r\n    }\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    const addTodolist = (newTitle:string) => {\r\n        let newId = v1()\r\n        let newTodoList:TodolistType = {id: newId, title: newTitle, filter: \"all\"}\r\n        setTodolists([newTodoList,...todolists])\r\n        setTasks({...tasks,[newId]:[]})\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm callBack={addTodolist} />\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                    }\r\n\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        editTitleTodolist = {editTitleTodolist}\r\n                        editTitleTask = {editTitleTask}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}